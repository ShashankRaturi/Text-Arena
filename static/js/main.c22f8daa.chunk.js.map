{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toogleModeRed","role","htmlFor","toggleMode","toogleModePink","defaultProps","about","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","countWord","trim","split","length","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","replace","document","getElementById","select","navigator","clipboard","writeText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c22f8daa.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n                </li> */}\r\n              </ul>\r\n              {/* <form className=\"d-flex\" role=\"search\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n              </form> */}\r\n                <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                    <input onClick={props.toogleModeRed} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Red Mode</label>\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                    <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                    <input onClick={props.toogleModePink} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Pink Mode</label>\r\n                </div>\r\n            </div>\r\n          </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string,\r\n    about : PropTypes.string\r\n}\r\n\r\n//you can even use default props , i.e, if properties are not set by user , then you can define them\r\n\r\nNavbar.defaultProps = {\r\n    title : \"Set title here\",\r\n    about : \"Set about here\"\r\n}","import React , {useState} from 'react'\r\n\r\nfunction TextForm(props) {\r\n    const handleUpClick = () => {\r\n        //console.log(\"uppercase was clicked : \" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase\" , \"success\")\r\n    }\r\n    const handleLoClick = () => {\r\n        //console.log(\"uppercase was clicked : \" + text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase\" , \"success\")\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text has been cleared\" , \"success\")\r\n    }\r\n    const handleVowelClick = () => {\r\n        let newText = text.replace(/a|e|i|o|u/g,'')\r\n        setText(newText)\r\n        props.showAlert(\"Vowels have been removed\" , \"success\")\r\n    }\r\n    const handleCopyClick = () => {\r\n        var newText = document.getElementById(\"myBox\")\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value)\r\n        props.showAlert(\"Text copied\" , \"success\")\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.replace(/\\s+/g, ' ').trim()\r\n        setText(newText)\r\n        props.showAlert(\"Extra spaces removed\" , \"success\")\r\n    }\r\n    const handleOnChange = (event) => {\r\n        //console.log(\"Onchange\")\r\n        setText(event.target.value)\r\n    }\r\n   const[text , setText] = useState('')\r\n   //text = \"hurrraaaaahhhhhhhhh\" // wrong way to change state\r\n   //setText(\"Please enter the text\") //correct way\r\n   \r\n   const countWord = (text) => {\r\n\r\n        // const len = text.length;\r\n        // var words = 0;\r\n\r\n        // if(len > 0){\r\n        //     words = text.split(\" \")\r\n        //     for(var i = 0; i < words.length; ++i){\r\n        //         if(words[i] === \" \")\r\n        //             words.splice(i , 1)\r\n        //     }\r\n        //     words = words.length\r\n        // }\r\n        // return words \r\n        let words;\r\n        if (text === \"\") \r\n            words = 0;\r\n        else \r\n            words = text.trim().split(/\\s+/).length;\r\n        return words;\r\n   \r\n    }\r\n   return (\r\n    <>\r\n        <div>\r\n            <h2 style={{color : props.mode === 'dark' ? 'white' : '#1f5056'}}>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} rows=\"8\" style={{backgroundColor : props.mode ==='light'?'white':'grey',color:props.mode ==='dark'?'white':'#1f5056'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>toUppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>toLowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>clearText</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleVowelClick}>deleteVowels</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopyClick}>copyText</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>Remove Extra spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color : props.mode === 'dark' ? 'white' : '#1f5056'}}>\r\n            <h1>Your text summary</h1>\r\n            <p>{countWord(text)} words and {text.length} characters</p>\r\n            <p>{ 0.008 * countWord(text)} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text : 'Enter something in the above textbox to preview it'}</p>\r\n        </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    \r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport React ,{ useState } from 'react';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert'\n// import {\n//   BrowserRouter as Router,\n//   Route,\n\n// } from \"react-router-dom\";\n\n//var name = \"Shashank Raturi Ji\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message , type) => {\n    setAlert({\n      msg : message,\n      type : type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const toggleMode  = () => {\n    if(mode === 'dark'){\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode has been enabled\" , \"success\")\n    }\n    else{\n      setMode('dark')\n      document.body.style.backgroundColor = 'rgb(51 68 82)'\n      showAlert(\"Dark Mode has been enabled\" , \"success\")\n    }\n      \n  }\n  const toogleModeRed = () => {\n    if(mode === 'dark'){\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode has been enabled\" , \"success\")\n    }\n    else{\n      setMode('dark')\n      document.body.style.backgroundColor = '#bd2929'\n      showAlert(\"Red Mode has been enabled\" , \"success\")\n    }\n  }\n  const toogleModePink = () => {\n    if(mode === 'dark'){\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode has been enabled\" , \"success\")\n    }\n    else{\n      setMode('dark')\n      document.body.style.backgroundColor = '#c769a7'\n      showAlert(\"Pink Mode has been enabled\" , \"success\")\n    }\n  }\n\n  return (\n    <>\n      \n      {/* <Router> */}\n        <Navbar title=\"TextArena\" about=\"About us\" mode={mode} toggleMode = {toggleMode} toogleModePink = {toogleModePink}  toogleModeRed={toogleModeRed}/>\n        <Alert alert={alert}/>\n        <div className=\"container\">\n          {/* <Routes> */}\n            {/* <Route   exact path=\"/about\"  element={<About/>}  /> */}\n            {/* <Route eaxct path=\"/\" element = {*/}\n            <TextForm heading=\"Enter text to analyze\"  mode={mode} showAlert={showAlert} />\n          {/* </Routes>  */}\n        </div>\n      {/* </Router> */}\n    </>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}